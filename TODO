
To do list (not yet in priority order):

Big stuff:
-Garbage Collector. Replace Boehm with exact, generational garbage collector like everyone else has. Can we borrow the GC from a Javascript implementation?
-R external interface. Make it possible to load and use existing R packages.
-Class systems: S3, S4, R5 (can the implementation of these be simplified somehow?)
-Graphics support
-GUI (can we use existing R interfaces?)
-Debugger or profiler?

-Validate parser against R parser. Handle line breaks in some statements like R currently does. Handle multibyte strings (use iconv?) See list of open questions in lexer.rl

Incomplete language features:
-NAs
-Incomplete parameter name matching.
	f <- function(x,y,index) {...}
	f(1,2,i=5)		# i should match parameter `index`
-warning, stop, on.exit, exceptions(?)
	-Warnings on too many parameters
	-Warning on attempt to use missing parameter
-next and break
-... parameters (some progress made on this front. repassed ... parameters are still evaluated in the wrong environment (the immediate caller's environment, rather than the original environment.)
-vector type conversion functions (as.*)
-environment and call stack access functions (parent.env, sys.call, sys.parent, etc.)
-eval
-attribute access functions
-attribute propogation
-data frames
-matrix product, outer product, kronecker product operators
-Matching operator
-Help
-$ indexing (Linear scan version done, but very slow. Can we store a map with a list or PIC?)
-matrix indexing
-[[]] indexing (Works with a single index)
-logical vector indexing
-negative number indexing
-character indexing
-switch statement
-search path
-argument names to built in functions (DONE)
-S3 Classes
-S4 Class support (what's implemented in the library?)
	Generic functions as first class type?
-Computing on the language functions
-substitute
-FFI
-built in functions galore
-factors

Language design issues:
-0-based indexing?
-Separate different indexing variants into distinct operators, e.g.
	a[c(0,1,2,3)]		selects elements 0..3
	a![c(0,1,2,3)]		selects all but elements 0..3
	Reasoning: deciding which to compute currently requires checking the index vector for positive and negative numbers. This revision would make that check unnecessary.
-Data frames as basic data type, necessary for DB-like query optimizations
-Richer type system, based on ADT? Represent NA in the type system.
